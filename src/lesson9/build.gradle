plugins {
    id 'groovy'
    id 'java'
}

group 'org.example'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def start = tasks.register("start") {
    finalizedBy {
        fatJar
    }
}

//create a single Jar with all dependencies

def fatJar = tasks.register("fatJar", Jar) {
    println "Jar creating start!"
    def mainClassName = "App"
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File',
                'Implementation-Version': version,
                'Main-Class': "$mainClassName"
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    doLast {println "Jar creating complete!"}

    finalizedBy {
        transferJar
    }
}

def transfer = tasks.register("transferJar") {
    doLast {
        def jarName = "${rootProject.name}-all-${version}.jar"
        println "Transfer start!"
        ant.move file: "${buildDir}/libs/${jarName}",
                todir: "${buildDir}/../DockerContainerDirectory"
        println "Transfer complete!"
    }

    finalizedBy {
        createDockerContainer
    }
}


def createDockerContainer = tasks.register("createDockerContainer", Exec) {
    doFirst {
        println "Start creating docker container!"
    }

    commandLine 'docker', 'build', '-t', "${project.name}:fat${version}", "./DockerContainerDirectory"

    doLast {
        println "Complete creating docker container!"
    }

    finalizedBy {
        runDockerContainer
    }
}

def runDockerContainer = tasks.register("runDockerContainer", Exec) {
    doFirst {
        println "Trying to start docker container!"
    }

    commandLine "cd", "./DockerContainerDirectory"
    commandLine "docker", "run", "--name", "gradleExample", "${project.name}:fat${project.version}"

    doLast {
        println "Complete running docker container!"
        println "Assembly success!"
    }
}

